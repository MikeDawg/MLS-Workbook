<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "MLS_RHEL6_Workbook.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection">
	<title>Exploring MLS and Data Protection</title>
	<para>
		This lab allows us to explore some of the data protection capabilities of MLS.
	</para>
	<para>
		In this scenario, Red Hat's desktop and server teams are working on the latest top-secret
developments. The developments are so top-secret, that the server team and the desktop team can't see what
each other are working on. They are both working on brand new products. In the meantime, engineering has hired them a temp to receive reports from both teams and make them more manager friendly for his supervisor. Both
teams must be careful not to leak data that the other team shouldn't have. However, these teams are allowed 
to speak of matters that both teams know of, but are still confidential elsewhere. The reports that the teams
create have the potential for containing confidential information which must be protected.
	</para>
	<para>
		This lab will walk through the steps for working with MLS to achieve the above conditions.
	</para>

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection-Introduction">
		<title>Introduction</title>
		<para>
			This is a test paragraph in a section
		</para>
	</section>

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection-TransRolesDomsTypes">
                <title>Creating Translations, Roles, Domains, and Types</title>
		<para>
			<informaltable frame="void">
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>Since these developments are of the highest level of secrecy, we need to
							determine what the highest level of security is now. We can do this by
							executing a listing of securtity
							compartments:<programlisting><command># semanage translation -l</command></programlisting>We
							should see that s2 is the highest level of security at "Secret." For
							this lab, we want to establish a highest level of security at s3. Keep
							in mind the Bell-LaPadula principle of "write up, read down." Adding a
							new heightened level of security should not be taken lightly. Creating a
							level of s3 to handle this data works well, but how do we keep the temp,
							server team, and desktop team from seeing each others files?<para>One
								might think that regular Linux DAC permissions would work here, but
								remember, the server and desktop teams need to be able to read what
								management writes. These are technically two different gruops. While
								ACLs would work in this situation, ACLs might not scale for our
								future needs, so we use MLS categories.</para><para>With categories,
									we can put the desktop team in s3:c1 and the server team in s3:c2.
									If we then give the temp and his supervisor s3, they will not have
									access to either of the categories, but will be at the appropriate
									level of security. Let's go ahead and set up the security level and
									categories:
<programlisting><command># semanage translation -a -T rhsecret s3</command>
<command># semanage translation -a -T rhsecret:desktop s3:c0</command>
<command># semanage translation -a -T rhsecret:server s3:c1</command></programlisting></para></td>
					</tr>
					<tr>
						<td>2</td>
						<td>Use semanage to make sure that the new levels are now set
							correctly:<programlisting><command># semanage translation -l</command></programlisting></td>
					</tr>
					<tr>
						<td>3</td>
						<td>Now we have some of the base layout for the system, but how do we
							determine who gets to be a part of rhsecret, rhsecret:desktop, and
							rhsecret:server? Also, how do we regulate what data these levels have
							access to? All of this needs to come about through the writing of an
							SELinux policy which establishes the rules for a new SELinux user named
							rhsecret_u who will operate in arole named rhsecret_r, which will be in
							the domain of type rhsecret_t and have access to files of type
							rhsecret_file_t. Execute the
							following:
<programlisting><command># cd /usr/share/selinux/devel</command>
<command># rnano rhsecret.te</command></programlisting></td>
					</tr>
					<tr>
						<td>4</td>
						<td>Enter the following SELinux Policy into the text
							editor:<programlisting>policy_module(rhsecret,1.0)

gen_require('
	role user_r;
	role user_t;
')

require {
	attribute domain;
	attribute file_type;
	class dir write;
	class dir read;
}

# Define rhsecret_file_t as file type
type rhsecret_file_t, file_type;

# Build the domain for rhsecret. Build the role for rhsecret_r and put it
#	in the domain of rhsecret_t
userdom_unpriv_user_template(rhsecret)
role rhsecret_r types rhsecret_t;

# Allow users in the user_r to transition into the role rhsecret_r
userdom_role_change_template(user,rhsecret)

allow rhsecret_t self:capability dac_read_search

# Set up the read/write privs for domain rhsecret_t when accessing files in 
#	rhsecret_file_t
allow rhsecret_t rhsecret_file_t:dir create_dir_perms;
allow rhsecret_t rhsecret_file_t:file create_file_perms;
allow rhsecret_t rhsecret_file_t:dir write;
allow rhsecret_t rhsecret_file_t:dir read;</programlisting></td>
					</tr>
					<tr>
						<td>5</td>
						<td>Now that we have the policy written, save it and execute the following
							to compile the
							policy:<programlisting><command># make rhsecret.pp</command></programlisting></td>
					</tr>
					<tr>
						<td>6</td>
						<td>Load the
							policy<programlisting><command># semodule -i rhsecret.pp</command></programlisting>Once you
							have loaded a policy, it will reload when the machine is rebooted.</td>
					</tr>
					<tr>
						<td>7</td>
						<td>Add the following line to
							/etc/selinux/mls/contexts/default_type:<programlisting>rhsecret_r:rhsecret_t</programlisting></td>
					</tr>
					<tr>
						<td>8</td>
						<td>Reboot the system for all of the changes to take effect.</td>
					</tr>
				</tbody>
			</informaltable>
		</para>
        </section>

        <section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection-Users">
                <title>Creating the SELinux User and Setting Up Users on the System</title>
<para>
			<informaltable frame="void">
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>Since SELinux roles are assigned to SELinux users, and we only want a
							handful of users having access to the rhsecret_r role, it makes sense to
							make an rhsecret_u user that our users on these projects will login as.
							In orer to do this, let's add the SELinux
							user:
<programlisting><command># semanage user -a -R "user_r rhsecret_r" \</command>
<command>-P rhsecret -r s0-s3:c0.c1 rhsecret_u</command></programlisting>This
							command added a user who can function in both the user_r and rhsecret_r
							role and can access security levels s0-s3 and categories c0 and c1 in
							s3. Keep in mind the policy: "write up, read down." If we do not give
							this SELinux user access to lower levels, we run into problems. Also
							keep in mind that even through every user signs in and gets an SELinux
							user assigned to them, their personal security level is determined by
							the login iformation which is managed by semanage.</td>
					</tr>
					<tr>
						<td>2</td>
						<td>Adding Shadowman the manager and Tony the temp. In order to add these
							roles, we must first create their regular
							users:
<programlisting><command># useradd shadowman tony</command>
<command># passwd shadowman ; passwd tony</command></programlisting></td>
					</tr>
					<tr>
						<td>3</td>
						<td>Let's now assign the users shadowman and tony to the SELinux user
							rhsecret_u and a security level of s3 only, so as not to let them access
							the projects
							directly:
<programlisting><command># semanage login -a -s rhsecret_u -r s3 shadowman</command>
<command># semanage login -a -s rhsecret_u -r s3 tony</command></programlisting></td>
					</tr>
					<tr>
						<td>4</td>
						<td>We can't forget about discretionary permissions either, so let's create
							a group for all of our users and add shadowman and tony to that
							group:
<programlisting><command># groupadd rhsecret</command>
<command># gpasswd -a shadowman rhsecret</command>
<command># gpasswd -a tony rhsecret</command></programlisting></td>
					</tr>
					<tr>
						<td>5</td>
						<td>Now we need to add users to the Desktop team. We'll add Robin and
							Lee:
<programlisting><command># useradd robin ; passwd robin</command>
<command># useradd lee ; passwd lee</command>
<command># gpasswd -a robin rhsecret</command>
<command># gpasswd -a lee rhsecret</command>
<command># semanage login -a -s rhsecret_u -r s3:c0 robin</command>
<command># semanage login -a -s rhsecret_u -r s3:c0 lee</command></programlisting>Notice
							how we gave Robin and Lee s3:c0. This is the security and category
							associated with the rhsecret:desktop team.</td>
					</tr>
					<tr>
						<td>6</td>
						<td>Now we need to add users to the Server team. We'll add Ted and
							Shawn:
<programlisting><command># useradd ted ; passwd ted ; gpasswd -a ted rhsecret</command>
<command># useradd shawn ; passwd shawn ; gpasswd -a shawn rhsecret</command>
<command># semanage login -a -s rhsecret_u -r s3:c1 ted</command>
<command># semanage login -a -s rhsecret_u -r s3:c1 shawn</command></programlisting>Notice
							how we have not given Ted and Shawn access to c0. This is so that they
							can only get to rhsecret:server (s3:c1) and not rhsecret:desktop
							(s3:c0).</td>
					</tr>
				</tbody>
			</informaltable>
		</para>
        </section>

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection-DirInfra">
		<title>Building the Directory Infrastructure</title>
		<para>
			<informaltable frame="void">
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>Now we need to set up directories for our groups. Let's set the following
									up:<para><emphasis role="bold">/rhsproject: </emphasis>The
								irectory for Tony and shadowman to primarily access. Accessible by
								anyone in s3 so long as they log in with s3 and the correct
								role.</para><para><emphasis role="bold">/rhsdesktop: </emphasis>The
								directory for the desktop team. Only accessible to those in s3:c0
								when they login with s3:c0 and the correct
									role.</para><para><emphasis role="bold">/rhsserver:
								</emphasis>The directory for the server team. Only accessible to
								those in s3:c1 when they login with s3:c1 and the correct
								role.</para></td>
					</tr>
					<tr>
						<td>2</td>
						<td><para>Set up
							/rhsproject:<programlisting><command>$ mkdir /rhsproject</command>
<command>$ chcon rhsecret_u:object_r:rhsecret_file_t:s3 /rhsproject</command>
<command>$ chown :rhsecret /rhsproject</command>
<command>$ chmod g+rws /rhsproject</command></programlisting></para></td>
					</tr>
					<tr>
						<td>3</td>
						<td><para>Set up /rhsdesktop:
<programlisting><command>$ mkdir /rhsdesktop</command>
<command>$ chcon rhsecret_u:object_r:rhsecret_file_t:s3:c0 /rhsdesktop</command>
<command>$ chown :rhsecret /rhsdesktop</command>
<command>$ chmod g+rws /rhsdesktop</command></programlisting></para></td>
					</tr>
					<tr>
						<td>4</td>
						<td><para>Set up /rhsserver:
							<programlisting><command>$ mkdir /rhsserver</command>
<command>$ chcon rhsecret_u:object_r:rhsecret_file_t:s3:c1 /rhsserver</command>
<command>$ chown :rhsecret /rhsserver</command>
<command>$ chmod g+rws /rhsserver</command></programlisting></para></td>
					</tr>
				</tbody>
			</informaltable>
		</para>
	</section>

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_and_Data_Protection-Testing">
		<title>Testing Our Setup</title>
		<para>
			<informaltable frame="void">
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>Log in as shadowman and say "n" to do you want to chose a new role.</td>
					</tr>
					<tr>
						<td>2</td>
						<td>
							<para>Since we said no at first to chosing a new role, we find now that
								we have more to type:</para>
							<para>
								<programlisting><command>secon</command></programlisting>
							</para>
							<para>We should see that we are in the role user_r with a user of rhsecret_u. The SELinux
								policy that we wrote should allow us to change roles to rhsecret_r.
								Let's try:</para>
							<para><programlisting><command>$ newrole -r rhsecret_r</command></programlisting></para>
							<para>You will be asked to enter your password again. Once you have done
								this, you should be logged in with the role rhsecret_r.</para>
						</td>
					</tr>
					<tr>
						<td>3</td>
						<td><para>See if you can write a file in the directory
								/rhsproject:<programlisting><command>$ cd /rhsproject</command>
<command>echo "My first report" >> testfile</command></programlisting></para>
						<para>The above should work.</para></td>
					</tr>
					<tr>
						<td>4</td>
						<td><para>Attempt to access /rhsdesktop and
								/rhsserver:<programlisting><command>$ cd /rhsdesktop</command></programlisting></para>
						<para>You should get a permission denied error. Try /rhsserver.</para>
						
		</td>
					</tr>
				</tbody>
			</informaltable>
		</para>
	</section>




	
</chapter>
