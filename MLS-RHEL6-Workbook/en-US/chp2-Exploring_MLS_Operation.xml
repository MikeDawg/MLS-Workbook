<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
<!ENTITY % BOOK_ENTITIES SYSTEM "MLS_RHEL6_Workbook.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-MLS_RHEL6_Workbook-Exploring_MLS_Operation">
	<title>Exploring MLS System Operation</title>
	<para>
		This lab will cover some of the principals of system operation in MLS. You will learn
how to gain administrative access, how to edit configuration files, schedule cron jobs, mount DVDs, add
users to an MLS system, lock and unlock user accounts, remove users, and defining administrative accounts on the system.
	</para>
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-AdminAccess">
		<title>Gain Administrative Access</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>On a normal system, to gain administrative access, we simply do:<para/>
							<para><programlisting><command>$ su -</command></programlisting></para>
							<para>On your MLS system, login as your administrative user (a regular
								user with staff_r as their default role) and then try the above. You
								should see:</para><para><programlisting><computeroutput>Always use '/bin/su -' (see Evaluated Configuration Guide)</computeroutput></programlisting></para></td>
					</tr>
					<tr>
						<td>2</td>
						<td>On an MLS system, to gain administrative access, one must issue the full path of the
							command. Execute the following to become root:<para><programlisting><command>$ /bin/su -</command></programlisting>
							</para></td>
					</tr>
					<tr>
						<td>3</td>
						<td>At this point you should be logged in as root. Execute:
								<programlisting><command># pwd</command>
<command># ls</command></programlisting><para>You
								should se that you are in /root, but for some reason, root is
								getting a permission denied on listing /root.</para></td>
					</tr>
					<tr>
						<td>4</td>
						<td>The reason root is getting a permission denied is that while you are logged in as root,
							you also have the role of staff_r. In order to do system administration
							tasks, you need to switch to the role
								sysadm_r:<programlisting><command># newrole -r sysadm_r</command><command># ls</command></programlisting><para>You
								will be asked to authenticate yourself. You will need to enter your
								password, not root's password. Once you have finished this, the ls
								should work.</para></td>
					</tr>
					<tr>
						<td>5</td>
						<td>Let's try to add an audit watch on a file in root named <emphasis role="bold"
								>donttouch</emphasis>:
								<programlisting><command># auditctl -w /root/donttouch -p wa -k privileged_files</command></programlisting>
							<para>Why didn't this work?</para></td>
					</tr>
					<tr>
						<td>6</td>
						<td>Become the audit administrator:
							<programlisting><command># newrole -r auditadm_r</command></programlisting><para>Now
								add the
							rule:</para><programlisting><command># auditctl -w /root/donttouch -p wa -k privileged_files</command></programlisting></td>
					</tr>
					<tr>
						<td>7</td>
						<td>Search for any audited results matching our new rule:
							<para><programlisting><command># ausearch -k privileged_files</command></programlisting></para><para>You will end up getting something
								similar to this:</para><para>
									<programlisting>Error opening config file (Permission denied)
NOTE - using built-in logs: /var/log/audit/audit.log
Error opening /var/log/audit/audit.log (Permission denied)</programlisting></para></td>
					</tr>
					<tr>
						<td>8</td>
						<td>In order to be able to use ausearch, we need to be in the role sysadm_r,
							not auditadm_r. Since we were just in the role sysadm_r, we can simply
								do:<para>exit</para><para>and we should then be back as sysadm_r. Do
								the following:</para><para><programlisting><command># touch /root/donttouch</command>
<command># ausearch -k privileged_files</command></programlisting></para></td>
					</tr>
				</tbody>
			</table>
		</para>
	</section>
	
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-EditConfig">
		<title>Editing Configuration Files</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>In an MLS system, the editor of choice is <emphasis role="italic">rnano</emphasis>.<para><quote>"Other editors can read and execute commands
								specificed in run control files or in the edited files themselves or
								have other complex dependencies on the execution environment. That
								is a security risk and inappropriate for an editor used for system
								administration tasks. The rnano editor was tested and examined as
								part of the evaluation to ensure that it works as expected and is
								secure, this was not done for any of the other editors shipped with
								the system" --LSPP EAL4 Evaluated Configuration Guide for Red Hat
								Enterprise Linux on IBM Hardware</quote></para></td>
					</tr>
					<tr>
						<td>2</td>
						<td>To set the EDITOR variable, use rnano to edit /etc/profile and make sure that it reads as
							follows:
							<programlisting>if [ `id -u` -eq 0 ]; then
	EDITOR=rnano
	export EDITOR
fi</programlisting>
						</td>
					</tr>
					<tr>
						<td>3</td>
						<td>To exit the rnano editor, simply hit Ctrl+X. You will be asked if you want to save your
							changes, and then if you do save your changes, you will be asked what
							file to save them to.</td>
					</tr>
					
				</tbody>
			</table>
		</para>
	</section>
	
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-Cron">
		<title>Scheduling Cron Jobs</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>Scheduling cron jobs in MLS works similarly to scheduling these jobs
							without MLS. One major difference is that you can specificy the
							MLS_LEVEL that a job should execute at. Let's create a directory for
							SystemHigh files in
							/tmp:<programlisting>$ mkdir /tmp/SystemHigh
$ chcon -l SystemHigh /tmp/SystemHigh</programlisting></td>
					</tr>
					<tr>
						<td>2</td>
						<td>If we create a file in /tmp/SystemHigh
							as:<programlisting>$ touch /tmp/SystemHigh/testfile</programlisting>we
							will see that it is created with SystemLow (ls -lZ /tmp/SystemHigh)</td>
					</tr>
					<tr>
						<td>3</td>
						<td>Let's establish a cron job that will write a file with a level of
							SystemHigh. Edit the crontab
							using:<programlisting>$ crontab -e</programlisting>and specificy the
							following:<programlisting>MLS_LEVEL=SystemHigh
* * * * * id -Z > /tmp/SystemHigh/crontest</programlisting></td>
					</tr>
					<tr>
						<td>4</td>
						<td>Execute the
							cronjob:<programlisting>$ watch ls -lZ /tmp/SystemH</programlisting>Within
							a minute you should see the file crontest being created with a level of
							SystemHigh.</td>
					</tr>
					<tr>
						<td>5</td>
						<td>We don't want all of our users creating cron jobs, so lets see how we
							can keep them from doing
							that:<programlisting># adduser sally
# passwd sally</programlisting></td>
					</tr>
					<tr>
						<td>6</td>
						<td>Having added sally in the previous step, let's add her to
							/etc/cron.deny:<programlisting>#echo "sally" >> /etc/cron.deny</programlisting>As
							long as there is not an /etc/cron.allow, then specifiying sally's name
							here will keep her from using crontab. If there were an /etc/cron.allow,
							then only users listed in that file would be able to use crontab.</td>
					</tr>
					<tr>
						<td>7</td>
						<td>Login as sally and
							execute:<programlisting>$ crontab -e</programlisting>The output should
							be similar
							to:<programlisting>You (sally) are not allowed to use this program (crontab)
See crontab(1) for more information</programlisting></td>
					</tr>
				</tbody>
			</table>
		</para>
	</section>

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-cdroms">
		<title>Mounting CD/DVD Media</title>
		<para> . . . </para>
	</section>
	
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-AddingUsers">
		<title>Adding Users</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>For adding users, if you set a temporary password, that password MUST be
							changed by the user as soon as possible. To accomplish this, you can use
							the following
							procedure:<programlisting># useradd -m -c "John Doe" jdoe
# passwd jdoe
# chage -d $(date +%F -d "60 days ago") jdoe</programlisting></td>
					</tr>

				</tbody>
			</table>
		</para>
	</section>	

	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-Locking">
		<title>Locking and Unlocking User Accounts</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>An account can be locked in one of two ways. We'll first discuss manual
							locking. To lock a user's account, simply
							type:<programlisting># passwd -l user</programlisting>So to lock jdoe's
							account, the command would
							be:<programlisting># passwd -l jdoe</programlisting></td>
					</tr>
					<tr>
						<td>2</td>
						<td>To reset an account that has been manually locked, you do the
							following:<programlisting>passwd -u user</programlisting>To unlock
							jdoe's account, the command would
							be:<programlisting># passwd -u jdoe</programlisting></td>
					</tr>
					<tr>
						<td>3</td>
						<td>The second way an account can be locked is through pam_tally. On MLS
							LSPP certified systems, pam_tally MUST be configured. According to
							/etc/pam.d/login, pam_tally2.so will deny an account acecss on the 5th
							login attempt. In order to see how many failed logins jdoe has right
							now, do the
							following:<programlisting>pam_tally2 --user jdoe</programlisting></td>
					</tr>
					<tr>
						<td>4</td>
						<td>Try logging in with the user jdoe and the wrong password until you
							see:<programlisting>Your account is locked. Maximum amount of failed attempts was reached.</programlisting>That
							is how the user knows that he is locked out. Log back in as root and
							check his tally again.</td>
					</tr>
					<tr>
						<td>5</td>
						<td>In order to reset jdoe's tally and effectively unlock him, issue the
							following
							command:<programlisting># pam_tally2 --user jdoe --reset</programlisting></td>
					</tr>
				</tbody>
			</table>
		</para>
	</section>	
	
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-Removing">
		<title>Removing Users</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>In order to remove a user, you should lock their account. For this
							exercise, we'll remove
							jdoe:<programlisting># passwd -l jdoe</programlisting></td>
					</tr>
					<tr>
						<td>2</td>
						<td>Next, we must kill all processes associated with
							jdoe:<programlisting># kill  -9 $(ps -la --User jdoe | awk '{print $4}')</programlisting></td>
					</tr>
					<tr>
						<td>3</td>
						<td>If we desire to recursively remove all files and directories belowing to
							the user, we can do the
							following:<programlisting># find / -depth \( ! -fstype ext4 -prune -false \) -o -user jdoe -exec rm -rf {} \;</programlisting>Be
							aware that this may delete files belonging to others if they are stored
							in a directory owned by this user!</td>
					</tr>
					<tr>
						<td>4</td>
						<td>Remove any cron jobs that the user
							has:<programlisting># crontab -u jdoe -r</programlisting></td>
					</tr>
					<tr>
						<td>5</td>
						<td>Finally, delete the
							account:<programlisting># userdel jdoe</programlisting></td>
					</tr>
				</tbody>
			</table>
		</para>
	</section>		
	
	<section id="sect-MLS_RHEL6_Workbook-Exploring_MLS_Operation-AdminAccounts">
		<title>Defining Administrative Accounts</title>
		<para>
			<table frame="void">
				<caption/>
				<col width="6%"/>
				<col width="94%"/>
				<thead>
					<tr>
						<th>Step</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>1</td>
						<td>For this exercise, we'll add the user kelsey and define her as an
							administrator. Let's add Kelsey to the system and set her
							password:<programlisting># useradd kelsey
# passwd kelsey</programlisting></td>
					</tr>
					<tr>
						<td>2</td>
						<td>Add Kelsey to the wheel group. Administrative users MUST be members of
							the wheel
							group:<programlisting># gpasswd -a kelsey wheel</programlisting></td>
					</tr>
					<tr>
						<td>3</td>
						<td>In LSPP mode, administrative users MUST be assigned to the staff_u
							class, and must be assigned to one or more administrative roles.
							Accomplish this by
							doing:<programlisting># semanage login -a -s staff_u -r SystemLow-SystemHigh kelsey
# restorecon -r /home/kelsey</programlisting>At
							this point, Kelsey can login and transition into sysadmin_r, secadm_r,
							and auditadm_r.</td>
					</tr>
				</tbody>
			</table>
		</para>
	</section>			
</chapter>
